# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dzi8X5eKqST3rpQbYc7vG0QcSngpZBLY
"""

def h(node):
    heuristic_values = {
        'A': 4, 'B': 8, 'C': 5, 'D': 11, 'E': 3, 'F': 9,
        'G': 14, 'H': 2, 'I': 4, 'K': 0, 'M': 12, 'N': 7, 'O': 5,
        'P': 13, 'Q': 10
    }
    return heuristic_values.get(node, float('inf'))

def print_path_and_cost(start, goal, parent, g):
    path = []
    current = goal
    while current != start:
        path.append(current)
        current = parent[current]
    path.append(start)
    path.reverse()
    print("Đường đi:", ' -> '.join(path))
    print("C(p) =", g[goal])

def A_star(graph, start, goals):
    MO = [start]  # Tập đỉnh mở, ban đầu chứa đỉnh start
    DONG = []     # Tập đỉnh đã xét, ban đầu rỗng
    g = {start: 0}  # Chi phí từ start đến các đỉnh khác
    f = {start: h(start)}  # Giá trị f(n) cho mỗi đỉnh
    parent = {}  # Lưu trữ cha của mỗi đỉnh

    while MO:
        # Chọn đỉnh n có f(n) nhỏ nhất từ tập MO
        min_f = float('inf')
        min_node = None
        for node in MO:
            if f[node] < min_f:
                min_f = f[node]
                min_node = node
        n = min_node

        if n in goals:
            # In ra đường đi và kết thúc thuật toán
            print_path_and_cost(start, n, parent, g)
            return True

        MO.remove(n)  # Xóa đỉnh n khỏi tập MO
        DONG.append(n)  # Thêm đỉnh n vào tập DONG

        for m, cost_g, cost_h in graph.get(n, []):
            cost_g_new = g[n] + cost_g  # Chi phí mới từ start đến m

            if m not in MO and m not in DONG:
                # Mở rộng đỉnh m
                g[m] = cost_g_new
                f[m] = g[m] + cost_h
                parent[m] = n
                MO.append(m)
            elif m in MO and g[m] > cost_g_new:
                # Cập nhật đỉnh m nếu có chi phí mới tốt hơn
                g[m] = cost_g_new
                f[m] = g[m] + cost_h
                parent[m] = n

    return False  # Không tìm thấy đường đi đến đỉnh đích
graph = {
'A': [('B', 8, 8), ('C',1,5),('E',3,3)],
'B': [ ('D',6, 11)],
'C': [ ('F', 14, 9)],
'D': [ ('H', 1, 2), ('E',7,3)],
'E': [('F',2,9), ('G',7,14),('I',8,4)],
'F':[('K', 13, 0)],
'G': [ ('N',9,7),('0',1,5)],
'H': [ ('N',10,7)],
'I': [ ('K', 8, 0), ('P',2,13),('0',10,5)],
'K': [ ('M',5, 12)],
'M': [],
'N':[('0',13, 5)],
'0':[('Q',3,10)],
'P': [ ('K', 7, 3)],
'Q': [ ('P', 4, 13)]
}
start = 'A'
goals = ['K']

A_star(graph, start, goals)